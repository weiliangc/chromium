// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module video_capture.mojom;

import "media/capture/mojo/video_capture_types.mojom";
import "services/video_capture/public/interfaces/video_capture_device_descriptor.mojom";
import "services/video_capture/public/interfaces/video_capture_device_proxy.mojom";
import "services/video_capture/public/interfaces/video_capture_settings.mojom";

enum DeviceAccessResultCode {
  NOT_INITIALIZED,
  SUCCESS,
  ERROR_DEVICE_NOT_FOUND
};

// Enables access to a set of video capture devices.
// Typical operation is to first call EnumerateDeviceDescriptors() to obtain
// information about available devices. The obtained descriptors can then be
// used to either obtain the supported formats for a device using
// GetSupportedFormats(), or to create an instance of VideoCaptureDevice for
// the device using CreateDevice().
// TODO(chfremer): Consider using a simple string identifier instead of a
// VideoCaptureDeviceDescriptor.
// https://crbug.com/637439
interface VideoCaptureDeviceFactory {
  EnumerateDeviceDescriptors()
      => (array<VideoCaptureDeviceDescriptor> descriptors);

  GetSupportedFormats(VideoCaptureDeviceDescriptor device_descriptor)
      => (array<VideoCaptureFormat> supported_formats);

  // Provides exclusive access to the device identified by |device_descriptor|.
  // The access is valid until either the message pipe associated with
  // |proxy_request| is closed by the client, or a subsequent call to
  // CreateDeviceProxy() is made. When a subsequent call is made while the
  // |proxy_request| from a previous call has not yet been closed, the service
  // "revokes" that previous |proxy_request| (by closing the connection) and the
  // exclusive access goes to the new |proxy_request|.
  // Note: This design avoids the issue of it not being clear how soon after a
  // |proxy_request| has been (asynchronously) discarded a subsequent call to
  // CreateDeviceProxy() would succeed if it were to deny access while still
  // in use.
  CreateDeviceProxy(VideoCaptureDeviceDescriptor device_descriptor,
                    VideoCaptureDeviceProxy& proxy_request)
      => (DeviceAccessResultCode result_code);
};
